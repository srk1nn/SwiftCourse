{"primaryContentSections":[{"content":[{"type":"heading","anchor":"Оператор-if-в-Swift","level":2,"text":"Оператор if в Swift"},{"type":"paragraph","inlineContent":[{"text":"Оператор ","type":"text"},{"type":"codeVoice","code":"if"},{"type":"text","text":" в является фундаментальной частью языка и используется в большинстве программ для контроля логики выполнения. Существует две основные формы оператора if."}]},{"type":"paragraph","inlineContent":[{"text":"Первая форма позволяет выполнять код только тогда, когда условие истинно, и имеет следующую форму:","type":"text"}]},{"syntax":"swift","code":["if условие {","    \/\/ блок кода, который выполнится, если условие истинно","}","","\/\/ Например","if age >= 18 {","    print(\"Вы совершеннолетний\")","}",""],"type":"codeListing"},{"inlineContent":[{"text":"Вторая форма оператора if предоставляет дополнительный else и используется для выполнения одной части кода, когда условие истинно, и другой части кода, когда то же условие ложно.","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["if условие {","    \/\/ блок кода, который выполнится, если условие истинно","} else {","    \/\/ блок кода, который выполнится, если условие ложно","}","","\/\/ Например","if age >= 18 {","    print(\"Вы совершеннолетний\")","} else {","    print(\"Вы не совершеннолетний\")","}"],"syntax":"swift"},{"level":3,"text":"Оператор else if","anchor":"Оператор-else-if","type":"heading"},{"inlineContent":[{"type":"text","text":"Оператор "},{"code":"else if","type":"codeVoice"},{"type":"text","text":" позволяет проверять несколько условий последовательно. Как только одно из условий становится истинным, соответствующий блок кода выполняется, а остальные условия игнорируются. Это полезно, когда нужно выполнить различные действия в зависимости от разных значений переменной."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let temperature = 25","","if temperature > 30 {","    print(\"Очень жарко\")","} else if temperature > 20 {","    print(\"Тепло\")","} else {","    print(\"Прохладно\")","}",""]},{"level":3,"text":"Тернарный оператор","type":"heading","anchor":"Тернарный-оператор"},{"type":"paragraph","inlineContent":[{"text":"Для простых условий можно использовать тернарный оператор ","type":"text"},{"type":"codeVoice","code":"? :"},{"type":"text","text":", который является сокращенной формой оператора "},{"type":"codeVoice","code":"if-else"},{"type":"text","text":":"}]},{"code":["let isSunny = true","let weather = isSunny ? \"Солнечно\" : \"Пасмурно\"","print(weather) \/\/ Выведет \"Солнечно\"",""],"syntax":"swift","type":"codeListing"},{"text":"Области видимости в Swift","type":"heading","level":2,"anchor":"Области-видимости-в-Swift"},{"inlineContent":[{"text":"Области видимости определяют, какие переменные и константы доступны в различных частях кода. При работе с ними достаточно запомнить, что переменные распространяются сверху вниз, то есть переменные с более высоких областей видимости видны в более локальных. Но не наоборот.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Нам пока что знакомы лишь 2 области видимости: глобальная и локальная. Переменные объявленые вне каких либо блоков находятся в глобальной области видимости и доступны в любом месте программы. Переменные, объявленые внутри блока кода (например, внутри условного оператора), доступны только внутри этого блока и блоках ниже.","type":"text"}],"type":"paragraph"},{"code":["let money = 1000","let price = 10","","if money >= price {","    \/\/ Можно обращаться к money и price,","    \/\/ поскольку они объявлены глобально","    let remainingMoney = money - price","    print(\"Покупаю. У меня осталось \\(remainingMoney) руб.\")","\t\t","    if remainingMoney >= price {","        \/\/ Можно обращаться к remainingMoney и price,","        \/\/ поскольку они объявлены в областях выше","        let remainingTotal = remainingMoney - price","        print(\"Покупаю еще раз. Остаток после двух покупок \\(remainingTotal) руб.\")\t\t","    }","}","","\/\/ print(remainingMoney) \/\/ Ошибка: недоступно за пределами областью видимости блока if"],"type":"codeListing","syntax":"swift"},{"level":2,"type":"heading","text":"Оператор switch в Swift","anchor":"Оператор-switch-в-Swift"},{"inlineContent":[{"type":"text","text":"Оператор "},{"type":"codeVoice","code":"switch"},{"text":" в Swift используется для проверки значения переменной на соответствие нескольким возможным случаям.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Оператор начинается с ключевого слова "},{"code":"switch","type":"codeVoice"},{"text":", за которым следует значение или выражение, которое нужно проверить. Затем идут блоки ","type":"text"},{"code":"case","type":"codeVoice"},{"type":"text","text":", каждый из которых содержит значение или диапазон значений. Если совпадение найдено, выполняется соответствующий блок кода. Блок "},{"code":"default","type":"codeVoice"},{"text":" используется для обработки всех остальных случаев, когда ни одно из условий не выполнено.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let number = 3","","switch number {","case 1:","    print(\"Один\")","case 2:","    print(\"Два\")","case 3:","    print(\"Три\")","default:","    print(\"Другое число\")","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"В Swift можно использовать диапазоны значений в блоках "},{"type":"codeVoice","code":"case"},{"type":"text","text":" для определения множественных значений. Оператор "},{"type":"codeVoice","code":"0...5"},{"type":"text","text":" создает закрытый диапазон, включая последнее число. Оператор "},{"type":"codeVoice","code":"0..<5"},{"type":"text","text":" создает открытый диапазон, не включая последнее число."}]},{"code":["let age = 25","","switch age {","case 0...12:","    print(\"Ребенок\")","case 13...19:","    print(\"Подросток\")","case 20...64:","    print(\"Взрослый\")","case 65...100:","    print(\"Пожилой\")","default:","    print(\"Некорректный возраст\")","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"Чтобы понять зачем нужен switch, если то же самое можно реализовать через if else if, рекомендую прочитать статью ","type":"text"},{"type":"reference","identifier":"https:\/\/www.hackingwithswift.com\/quick-start\/understanding-swift\/when-should-you-use-switch-statements-rather-than-if","isActive":true}],"type":"paragraph"}],"kind":"content"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"identifier":{"url":"doc:\/\/SwiftCourse\/documentation\/SwiftCourse\/3-branch-statements","interfaceLanguage":"swift"},"sections":[],"hierarchy":{"paths":[["doc:\/\/SwiftCourse\/documentation\/SwiftCourse"]]},"metadata":{"title":"[Конспект] 3. Операторы условного перехода","roleHeading":"Article","modules":[{"name":"SwiftCourse"}],"role":"article"},"kind":"article","variants":[{"paths":["\/documentation\/swiftcourse\/3-branch-statements"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://SwiftCourse/documentation/SwiftCourse":{"url":"\/documentation\/swiftcourse","kind":"symbol","role":"collection","title":"SwiftCourse","type":"topic","abstract":[{"text":"Этот репозиторий является сборником задач по языку Swift","type":"text"}],"identifier":"doc:\/\/SwiftCourse\/documentation\/SwiftCourse"},"https://www.hackingwithswift.com/quick-start/understanding-swift/when-should-you-use-switch-statements-rather-than-if":{"type":"link","title":"Когда стоит использовать switch вместо if ?","titleInlineContent":[{"text":"Когда стоит использовать switch вместо if ?","type":"text"}],"identifier":"https:\/\/www.hackingwithswift.com\/quick-start\/understanding-swift\/when-should-you-use-switch-statements-rather-than-if","url":"https:\/\/www.hackingwithswift.com\/quick-start\/understanding-swift\/when-should-you-use-switch-statements-rather-than-if"}}}