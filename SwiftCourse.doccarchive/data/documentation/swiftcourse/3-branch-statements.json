{"schemaVersion":{"major":0,"minor":3,"patch":0},"hierarchy":{"paths":[["doc:\/\/SwiftCourse\/documentation\/SwiftCourse"]]},"sections":[],"metadata":{"modules":[{"name":"SwiftCourse"}],"role":"article","roleHeading":"Article","title":"[Конспект] 3. Операторы условного перехода"},"kind":"article","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftcourse\/3-branch-statements"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SwiftCourse\/documentation\/SwiftCourse\/3-branch-statements"},"primaryContentSections":[{"kind":"content","content":[{"level":2,"type":"heading","anchor":"Оператор-if-в-Swift","text":"Оператор if в Swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Оператор "},{"code":"if","type":"codeVoice"},{"type":"text","text":" в является фундаментальной частью языка и используется в большинстве программ для контроля логики выполнения. Существует две основные формы оператора if."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Первая форма позволяет выполнять код только тогда, когда условие истинно, и имеет следующую форму:"}]},{"code":["if условие {","    \/\/ блок кода, который выполнится, если условие истинно","}","","\/\/ Например","if age >= 18 {","    print(\"Вы совершеннолетний\")","}",""],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Вторая форма оператора if предоставляет дополнительный else и используется для выполнения одной части кода, когда условие истинно, и другой части кода, когда то же условие ложно."}]},{"type":"codeListing","syntax":"swift","code":["if условие {","    \/\/ блок кода, который выполнится, если условие истинно","} else {","    \/\/ блок кода, который выполнится, если условие ложно","}","","\/\/ Например","if age >= 18 {","    print(\"Вы совершеннолетний\")","} else {","    print(\"Вы не совершеннолетний\")","}"]},{"level":3,"type":"heading","text":"Оператор else if","anchor":"Оператор-else-if"},{"inlineContent":[{"type":"text","text":"Оператор "},{"code":"else if","type":"codeVoice"},{"type":"text","text":" позволяет проверять несколько условий последовательно. Как только одно из условий становится истинным, соответствующий блок кода выполняется, а остальные условия игнорируются. Это полезно, когда нужно выполнить различные действия в зависимости от разных значений переменной."}],"type":"paragraph"},{"syntax":"swift","code":["let temperature = 25","","if temperature > 30 {","    print(\"Очень жарко\")","} else if temperature > 20 {","    print(\"Тепло\")","} else {","    print(\"Прохладно\")","}",""],"type":"codeListing"},{"text":"Тернарный оператор","level":3,"anchor":"Тернарный-оператор","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Для простых условий можно использовать тернарный оператор "},{"type":"codeVoice","code":"? :"},{"text":", который является сокращенной формой оператора ","type":"text"},{"code":"if-else","type":"codeVoice"},{"type":"text","text":":"}]},{"type":"codeListing","code":["let isSunny = true","let weather = isSunny ? \"Солнечно\" : \"Пасмурно\"","print(weather) \/\/ Выведет \"Солнечно\"",""],"syntax":"swift"},{"type":"heading","anchor":"Области-видимости-в-Swift","level":2,"text":"Области видимости в Swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Области видимости определяют, какие переменные и константы доступны в различных частях кода. При работе с ними достаточно запомнить, что переменные распространяются сверху вниз, то есть переменные с более высоких областей видимости видны в более локальных. Но не наоборот."}]},{"inlineContent":[{"text":"Нам пока что знакомы лишь 2 области видимости: глобальная и локальная. Переменные объявленые вне каких либо блоков находятся в глобальной области видимости и доступны в любом месте программы. Переменные, объявленые внутри блока кода (например, внутри условного оператора), доступны только внутри этого блока и блоках ниже.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let money = 1000","let price = 10","","if money >= price {","    \/\/ Можно обращаться к money и price,","    \/\/ поскольку они объявлены глобально","    let remainingMoney = money - price","    print(\"Покупаю. У меня осталось \\(remainingMoney) руб.\")","\t\t","    if remainingMoney >= price {","        \/\/ Можно обращаться к remainingMoney и price,","        \/\/ поскольку они объявлены в областях выше","        let remainingTotal = remainingMoney - price","        print(\"Покупаю еще раз. Остаток после двух покупок \\(remainingTotal) руб.\")\t\t","    }","}","","\/\/ print(remainingMoney) \/\/ Ошибка: недоступно за пределами областью видимости блока if"]},{"anchor":"Оператор-switch-в-Swift","level":2,"type":"heading","text":"Оператор switch в Swift"},{"inlineContent":[{"text":"Оператор ","type":"text"},{"code":"switch","type":"codeVoice"},{"type":"text","text":" в Swift используется для проверки значения переменной на соответствие нескольким возможным случаям."}],"type":"paragraph"},{"inlineContent":[{"text":"Оператор начинается с ключевого слова ","type":"text"},{"code":"switch","type":"codeVoice"},{"type":"text","text":", за которым следует значение или выражение, которое нужно проверить. Затем идут блоки "},{"type":"codeVoice","code":"case"},{"text":", каждый из которых содержит значение или диапазон значений. Если совпадение найдено, выполняется соответствующий блок кода. Блок ","type":"text"},{"code":"default","type":"codeVoice"},{"text":" используется для обработки всех остальных случаев, когда ни одно из условий не выполнено.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let number = 3","","switch number {","case 1:","    print(\"Один\")","case 2:","    print(\"Два\")","case 3:","    print(\"Три\")","default:","    print(\"Другое число\")","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"В Swift можно использовать диапазоны значений в блоках ","type":"text"},{"code":"case","type":"codeVoice"},{"text":" для определения множественных значений. Оператор ","type":"text"},{"code":"0...5","type":"codeVoice"},{"type":"text","text":" создает закрытый диапазон, включая последнее число. Оператор "},{"code":"0..<5","type":"codeVoice"},{"type":"text","text":" создает открытый диапазон, не включая последнее число."}]},{"syntax":"swift","code":["let age = 25","","switch age {","case 0...12:","    print(\"Ребенок\")","case 13...19:","    print(\"Подросток\")","case 20...64:","    print(\"Взрослый\")","case 65...100:","    print(\"Пожилой\")","default:","    print(\"Некорректный возраст\")","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Чтобы понять зачем нужен switch, если то же самое можно реализовать через if else if, рекомендую прочитать статью "},{"isActive":true,"identifier":"https:\/\/www.hackingwithswift.com\/quick-start\/understanding-swift\/when-should-you-use-switch-statements-rather-than-if","type":"reference"}]}]}],"references":{"https://www.hackingwithswift.com/quick-start/understanding-swift/when-should-you-use-switch-statements-rather-than-if":{"titleInlineContent":[{"text":"Когда стоит использовать switch вместо if ?","type":"text"}],"title":"Когда стоит использовать switch вместо if ?","url":"https:\/\/www.hackingwithswift.com\/quick-start\/understanding-swift\/when-should-you-use-switch-statements-rather-than-if","type":"link","identifier":"https:\/\/www.hackingwithswift.com\/quick-start\/understanding-swift\/when-should-you-use-switch-statements-rather-than-if"},"doc://SwiftCourse/documentation/SwiftCourse":{"role":"collection","title":"SwiftCourse","kind":"symbol","identifier":"doc:\/\/SwiftCourse\/documentation\/SwiftCourse","type":"topic","url":"\/documentation\/swiftcourse","abstract":[{"text":"Этот репозиторий является сборником задач по языку Swift","type":"text"}]}}}